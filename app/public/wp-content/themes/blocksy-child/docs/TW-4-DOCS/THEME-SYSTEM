# Tailwind CSS Theme System: Simple Guide

## What Is a Theme?

A theme in Tailwind CSS is like a box of crayons that you get to pick! It contains all the colors, sizes, fonts, and other design pieces that make your website look special.

## How Themes Work

Tailwind uses special variables called "theme variables" to create all the utility classes you can use. These variables are defined using the `@theme` directive:

```css
@import "tailwindcss";

@theme {
  --color-blue-500: #3b82f6;
  --font-main: "Comic Sans MS", sans-serif;
  --spacing-big: 2rem;
}
```

## What Happens When You Define Theme Variables

When you create theme variables, two magical things happen:

1. **Utility Classes Appear**: Tailwind automatically creates classes like `bg-blue-500`, `font-main`, and `p-big` that you can use in your HTML.

2. **CSS Variables Are Created**: You also get CSS variables like `var(--color-blue-500)` that you can use in your custom CSS.

## Theme Variable Namespaces

Theme variables are organized in special groups called "namespaces." Each namespace controls different types of utility classes:

- `--color-*`: Controls color utilities like `bg-red-500`, `text-blue-300`
- `--font-*`: Controls font family utilities like `font-sans`, `font-serif`
- `--spacing-*`: Controls spacing utilities like `p-4`, `m-6`, `gap-2`
- `--breakpoint-*`: Controls responsive breakpoints like `sm:`, `md:`, `lg:`
- `--radius-*`: Controls border radius utilities like `rounded-sm`, `rounded-lg`
- `--shadow-*`: Controls shadow utilities like `shadow-md`, `shadow-xl`

## Why Use `@theme` Instead of `:root`?

You might wonder why Tailwind uses `@theme` instead of normal CSS variables in `:root`. Here's why:

1. `@theme` variables do more than store values - they tell Tailwind to create utility classes
2. `@theme` variables must be at the top level of your CSS, not inside other selectors
3. You can still use regular `:root` variables for things that don't need utility classes

## Example: Adding a Custom Color

Let's say you want to add a special "mint" color to your design:

```css
@theme {
  --color-mint-500: oklch(0.72 0.11 178);
}
```

Now you can use these classes in your HTML:
- `bg-mint-500` (for backgrounds)
- `text-mint-500` (for text)
- `border-mint-500` (for borders)

And you can use `var(--color-mint-500)` in your custom CSS too!

## How This Connects to WordPress

In WordPress with Tailwind, you can:

1. Define theme variables in your CSS files
2. Use the WordPress `theme.json` file to define colors and other design tokens
3. Convert `theme.json` values into Tailwind theme variables

This gives you a consistent design system across your entire WordPress site!
